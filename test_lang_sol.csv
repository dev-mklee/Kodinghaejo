INDEX,TL_INDEX,CONTENT,REGDATE,IS_USE
1,,"**JAVA**

```java
import java.util.stream.IntStream;

class Solution {
    public int solution(int a, int d, boolean[] included) {
        return IntStream.range(0, included.length)
                .filter(i -> included[i])
                .map(i -> a + i * d)
                .sum();
    }
}
```

**JAVASCRIPT**

```javascript
const solution = (a, d, included) => {
  return included
    .map((v, i) => v && (a + i * d))
    .filter(v => !!v)
    .reduce((acc, cur) => acc + cur, 0);
};
```

**SQL**

```sql
SELECT SUM(CASE WHEN included THEN a + row_number() OVER () * d END)
FROM (SELECT a, d, included, ROW_NUMBER() OVER () AS row_number FROM t) AS subquery
WHERE included;
```",,
2,,"```java
class Solution {
    public String solution(String code) {
        char[] ret = new char[code.length()];
        int idx = 0, j = 0;
        boolean mode = false;

        for (char c : code.toCharArray()) {
            if (c == '1') mode = !mode;
            if (mode) ret[j++] = c;
            idx++;
        }

        return j == 0 ? ""EMPTY"" : new String(ret, 0, j);
    }
}
```

```javascript
function solution(code) {
  let ret = """";
  let idx = 0;
  let mode = false;

  for (let c of code) {
    if (c === ""1"") mode = !mode;
    if (mode) ret += c;
    idx++;
  }

  return ret === """" ? ""EMPTY"" : ret;
}
```

```sql
CREATE OR REPLACE FUNCTION solution(code VARCHAR(256)) RETURNS VARCHAR(256)
BEGIN
    DECLARE ret VARCHAR(256) DEFAULT '';
    DECLARE idx INT DEFAULT 0;
    DECLARE mode INT DEFAULT 0;

    WHILE idx < LENGTH(code) DO
        IF SUBSTR(code, idx + 1, 1) = '1' THEN
            SET mode = !mode;
        END IF;

        IF mode = 1 THEN
            SET ret = CONCAT(ret, SUBSTR(code, idx + 1, 1));
        END IF;

        SET idx = idx + 1;
    END WHILE;

    IF ret = '' THEN
        RETURN 'EMPTY';
    ELSE
        RETURN ret;
    END IF;
END;
```",,
3,,"**JAVA**

```java
public int solution(int a, int b, boolean flag) {
    return flag ? a + b : a - b;
}
```

**JAVASCRIPT**

```javascript
const solution = (a, b, flag) => flag ? a + b : a - b;
```

**SQL**

```sql
CREATE FUNCTION solution(a INT, b INT, flag BOOLEAN) RETURNS INT
BEGIN
  IF flag THEN
    RETURN a + b;
  ELSE
    RETURN a - b;
  END IF;
END;
```",,
4,,"```java
class Solution {
    public int solution(String ineq, String eq, int n, int m) {
        if (ineq.equals(""<"")) {
            if (eq.equals(""="")) {
                return n < m ? 1 : 0;
            } else {
                return n <= m ? 1 : 0;
            }
        } else {
            if (eq.equals(""="")) {
                return n > m ? 1 : 0;
            } else {
                return n >= m ? 1 : 0;
            }
        }
    }
}
```

```javascript
function solution(ineq, eq, n, m) {
  if (ineq === ""<"") {
    if (eq === ""="") {
      return n < m ? 1 : 0;
    } else {
      return n <= m ? 1 : 0;
    }
  } else {
    if (eq === ""="") {
      return n > m ? 1 : 0;
    } else {
      return n >= m ? 1 : 0;
    }
  }
}
```

```sql
CREATE FUNCTION solution(ineq TEXT, eq TEXT, n INTEGER, m INTEGER)
RETURNS INTEGER
DETERMINISTIC
BEGIN
  IF ineq = '<' THEN
    IF eq = '=' THEN
      RETURN CASE WHEN n < m THEN 1 ELSE 0 END;
    ELSE
      RETURN CASE WHEN n <= m THEN 1 ELSE 0 END;
    END IF;
  ELSE
    IF eq = '=' THEN
      RETURN CASE WHEN n > m THEN 1 ELSE 0 END;
    ELSE
      RETURN CASE WHEN n >= m THEN 1 ELSE 0 END;
    END IF;
  END IF;
END;
```",,
5,,"**JAVA 코드**
```java
public int solution(int n) {
    return n % 2 == 1 ? getOddSum(n) : getEvenSquareSum(n);
}

private int getOddSum(int n) {
    int sum = 0;
    for (int i = 1; i <= n; i += 2) {
        sum += i;
    }
    return sum;
}

private int getEvenSquareSum(int n) {
    int sum = 0;
    for (int i = 2; i <= n; i += 2) {
        sum += i * i;
    }
    return sum;
}
```

**JAVASCRIPT 코드**
```javascript
function solution(n) {
  return n % 2 === 1 ? getOddSum(n) : getEvenSquareSum(n);
}

function getOddSum(n) {
  let sum = 0;
  for (let i = 1; i <= n; i += 2) {
    sum += i;
  }
  return sum;
}

function getEvenSquareSum(n) {
  let sum = 0;
  for (let i = 2; i <= n; i += 2) {
    sum += i * i;
  }
  return sum;
}
```

**SQL 코드**
```sql
SELECT
  CASE
    WHEN n % 2 = 1
    THEN (
      SELECT SUM(i)
      FROM (
        SELECT i
        FROM int_sequence
        WHERE i <= n AND i % 2 = 1
      ) AS t
    )
    ELSE (
      SELECT SUM(i * i)
      FROM (
        SELECT i
        FROM int_sequence
        WHERE i <= n AND i % 2 = 0
      ) AS t
    )
  END AS result
FROM int_sequence
WHERE n = 1;
```",,
6,,"**JAVA**

```java
import java.util.*;

class Solution {
    public int solution(int number, int n, int m) {
        return (number % n == 0 && number % m == 0) ? 1 : 0;
    }
}
```

**JAVASCRIPT**

```javascript
const solution = (number, n, m) => {
  return (number % n === 0 && number % m === 0) ? 1 : 0;
};
```

**SQL**

```sql
CREATE FUNCTION solution(@number INT, @n INT, @m INT)
RETURNS INT
AS
BEGIN
  RETURN CASE
    WHEN @number % @n = 0 AND @number % @m = 0 THEN 1
    ELSE 0
  END;
END;
```",,
7,,"**Java**
```java
class Solution {
    public int solution(int num, int n) {
        return num % n == 0 ? 1 : 0;
    }
}
```

**JavaScript**
```javascript
function solution(num, n) {
  return num % n === 0 ? 1 : 0;
}
```

**SQL**
```sql
SELECT CASE WHEN num % n = 0 THEN 1 ELSE 0 END AS is_multiple;
```",,
8,,"**JAVA**

```java
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        long sum = (long) a + b;
        long mul = (long) a * b * 2;
        System.out.println(sum > mul ? sum : mul);
    }
}
```

**JAVASCRIPT**

```javascript
const solution = (a, b) => {
  const sum = a + b;
  const mul = 2 * a * b;
  return sum > mul ? sum : mul;
};

console.log(solution(10, 5)); // 50
console.log(solution(5, 5)); // 25
console.log(solution(5, 3)); // 20
```

**SQL**

```sql
CREATE FUNCTION solution(a INT, b INT) RETURNS INT
AS
BEGIN
  DECLARE sum INT;
  DECLARE mul INT;
  SET sum = a + b;
  SET mul = 2 * a * b;
  RETURN IF(sum > mul, sum, mul);
END;
```",,
9,,"**JAVA**

```java
class Solution {
    public int solution(int a, int b) {
        String str1 = String.valueOf(a) + String.valueOf(b);
        String str2 = String.valueOf(b) + String.valueOf(a);

        return Integer.parseInt(str1) > Integer.parseInt(str2) ? Integer.parseInt(str1) : Integer.parseInt(str2);
    }
}
```

**JAVASCRIPT**

```javascript
function solution(a, b) {
  const str1 = a.toString() + b.toString();
  const str2 = b.toString() + a.toString();

  return Number(str1) > Number(str2) ? Number(str1) : Number(str2);
}
```

**SQL**

```sql
CREATE FUNCTION solution(@a INT, @b INT)
RETURNS INT
AS
BEGIN
  DECLARE @str1 NVARCHAR(MAX) = CONCAT(@a, @b);
  DECLARE @str2 NVARCHAR(MAX) = CONCAT(@b, @a);

  RETURN CASE
    WHEN @str1 > @str2
    THEN CAST(@str1 AS INT)
    ELSE
      CAST(@str2 AS INT)
    END;
END;
```",,
10,,"**JAVA**

```java
public static String solution(String my_string, int k) {
    StringBuilder result = new StringBuilder();
    for (int i = 0; i < k; i++) {
        result.append(my_string);
    }
    return result.toString();
}
```

**JAVASCRIPT**

```javascript
const solution = (my_string, k) => {
  let result = """";
  for (let i = 0; i < k; i++) {
    result += my_string;
  }
  return result;
};
```

**SQL**

문제와 제공되는 언어에 SQL이 포함되어 있지 않으므로 SQL 코드를 제공할 수 없습니다.",,
11,,"**JAVA**
```java
class Solution {
    public String solution(char[] arr) {
        StringBuilder sb = new StringBuilder();
        for (char c : arr) sb.append(c);
        return sb.toString();
    }
}
```

**JAVASCRIPT**
```javascript
const solution = (arr) => arr.join('');
```

**SQL**
```sql
SELECT GROUP_CONCAT(arr) AS result FROM (VALUES (arr[1]), (arr[2]), ... (arr[n])) AS t(arr);
```",,
12,,"**JAVA**

```java
class Solution {
    public String solution(String str1, String str2) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < str1.length(); i++) {
            sb.append(str1.charAt(i)).append(str2.charAt(i));
        }
        return sb.toString();
    }
}
```

**JAVASCRIPT**

```javascript
function solution(str1, str2) {
  let result = """";
  for (let i = 0; i < str1.length; i++) {
    result += str1[i] + str2[i];
  }
  return result;
}
```

**SQL**

```sql
SELECT
  CASE
    WHEN MOD(LENGTH(str1), 2) = 0
    THEN (
      SELECT
        SUBSTR(str1, 1, LENGTH(str1) / 2) || SUBSTR(str2, 1, LENGTH(str2) / 2)
    )
    ELSE (
      SELECT
        SUBSTR(str1, 1, LENGTH(str1) / 2 + 1) || SUBSTR(str2, 1, LENGTH(str2) / 2)
    )
  END AS result
FROM STR1
CROSS JOIN STR2;
```",,
13,,"**Java**

```java
public class Solution {
    public String solution(String my_string, String overwrite_string, int s) {
        return my_string.substring(0, s) + overwrite_string + my_string.substring(s + overwrite_string.length());
    }
}
```

**JavaScript**

```javascript
const solution = (my_string, overwrite_string, s) => {
  return my_string.substring(0, s) + overwrite_string + my_string.substring(s + overwrite_string.length);
};
```

**SQL**

```sql
CREATE FUNCTION solution(my_string VARCHAR(255), overwrite_string VARCHAR(255), s INT)
RETURNS VARCHAR(255)
BEGIN
  RETURN SUBSTRING(my_string, 1, s) || overwrite_string || SUBSTRING(my_string, s + LENGTH(overwrite_string));
END;
```",,
14,,"**JAVA**

```java
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        if (n % 2 == 0) {
            System.out.println(""n is even"");
        } else {
            System.out.println(""n is odd"");
        }
    }
}
```

**JAVASCRIPT**

```javascript
const Solution = Number(prompt(""Enter a number: ""));
if (n % 2 === 0) {
  console.log(`${n} is even`);
} else {
  console.log(`${n} is odd`);
}
```

**SQL**

```sql
SELECT CASE
  WHEN MOD(@n, 2) = 0
  THEN 'n is even'
  ELSE 'n is odd'
END AS result;
```",,
15,,"**JAVA**

```java
class Solution {
    public String rotateString(String str) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < str.length(); i++) {
            sb.append(str.charAt((i + str.length() - 1) % str.length()));
        }
        return sb.toString();
    }
}
```

**JAVASCRIPT**

```javascript
const Solution = (str) => {
  let rotatedStr = """";
  for (let i = 0; i < str.length; i++) {
    rotatedStr += str[(i + str.length - 1) % str.length];
  }
  return rotatedStr;
};
```

**SQL**

```sql
CREATE FUNCTION Solution(str TEXT) RETURNS TEXT
AS
BEGIN
  DECLARE rotatedStr TEXT DEFAULT '';
  DECLARE i INTEGER DEFAULT 0;
  WHILE i < LENGTH(str) DO
    SET rotatedStr = rotatedStr || SUBSTR(str, (i + LENGTH(str) - 1) % LENGTH(str) + 1, 1);
    SET i = i + 1;
  END WHILE;
  RETURN rotatedStr;
END;
```",,
16,,"**JAVA**

```java
import java.util.Scanner;

public class Solution {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String str1 = scanner.nextLine();
        String str2 = scanner.nextLine();
        System.out.println(str1 + "" "" + str2);
    }
}
```

**JAVASCRIPT**

```javascript
let input = require(""fs"").readFileSync(""/dev/stdin"").toString().trim().split(""\n"");
let str1 = input[0];
let str2 = input[1];
console.log(str1 + "" "" + str2);
```

**SQL**

```sql
DECLARE @str1 VARCHAR(255), @str2 VARCHAR(255);
SET @str1 = 'Hello';
SET @str2 = 'World';
SELECT @str1 + ' ' + @str2 AS ConcatenatedString;
```",,
17,,"**JAVA**

```java
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println(a + "" + "" + b + "" = "" + (a + b));
        System.out.println(a + "" - "" + b + "" = "" + (a - b));
        System.out.println(a + "" * "" + b + "" = "" + (a * b));
        System.out.println(a + "" / "" + b + "" = "" + (a / b));
    }
}
```

**JAVASCRIPT**

```javascript
const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});

readline.question('두 정수를 입력하세요: ', (input) => {
  const [a, b] = input.split(' ').map(Number);
  console.log(`${a} + ${b} = ${a + b}`);
  console.log(`${a} - ${b} = ${a - b}`);
  console.log(`${a} * ${b} = ${a * b}`);
  console.log(`${a} / ${b} = ${a / b}`);
  readline.close();
});
```

**SQL**

```sql
WITH Input AS (
  SELECT * FROM (VALUES (1, 2), (3, 4), (5, 6)) AS Input(a, b)
)
SELECT
  a || ' + ' || b AS Statement,
  a + b AS Result
FROM Input;
```",,
18,,"**JAVA**
```java
System.out.println(""\n=================================================="");
System.out.println(""                         Table"");
System.out.println(""=================================================="");
System.out.printf(""%-15s%-15s%-15s\n"", ""Student ID"", ""Name"", ""Age"");
System.out.println(""--------------------------------------------------"");
for (Student student : students) {
    System.out.printf(""%-15s%-15s%-15s\n"", student.getId(), student.getName(), student.getAge());
}
System.out.println(""=================================================="");
```

**JAVASCRIPT**
```javascript
console.log(""\n=================================================="");
console.log(""                         Table"");
console.log(""=================================================="");
console.log(""|%-15s|%-15s|%-15s|"", ""Student ID"", ""Name"", ""Age"");
console.log(""--------------------------------------------------"");
for (let student of students) {
    console.log(""|%-15s|%-15s|%-15s|"", student.id, student.name, student.age);
}
console.log(""=================================================="");
```

**SQL**
```sql
SELECT * FROM students;
```",,
19,,"**JAVA**

```java
class Solution {
    public String solution(String str) {
        StringBuilder sb = new StringBuilder();
        for (char c : str.toCharArray()) {
            if (Character.isUpperCase(c)) {
                sb.append(Character.toLowerCase(c));
            } else {
                sb.append(Character.toUpperCase(c));
            }
        }
        return sb.toString();
    }
}
```

**JAVASCRIPT**

```javascript
const solution = (str) => {
  let result = '';

  for (let i = 0; i < str.length; i++) {
    const char = str[i];
    result += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();
  }

  return result;
};
```

**SQL**

```sql
SELECT
  CASE
    WHEN UPPER(s) = s
    THEN LOWER(s)
    ELSE UPPER(s)
  END AS converted_string
FROM table_name
WHERE s = '입력 문자열';
```",,
20,,"**JAVA**

```java
public class Solution {

    public static void main(String[] args) {
        String str = ""Hello"";
        int n = 3;
        String repeatedStr = str.repeat(n);
        System.out.println(repeatedStr);
    }
}
```

**JAVASCRIPT**

```javascript
function Solution(str, n) {
    return str.repeat(n);
}

const str = ""Hello"";
const n = 3;
const repeatedStr = repeatString(str, n);
console.log(repeatedStr);
```

**SQL**

```sql
DECLARE @str VARCHAR(50) = 'Hello';
DECLARE @n INT = 3;

SELECT REPLICATE(@str, @n) AS RepeatedString;
```",,
21,,"**JAVA**

```java
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println(a);
        System.out.println(b);
    }
}
```

**JAVASCRIPT**

```javascript
const input = require('fs').readFileSync('/dev/stdin').toString().trim().split(' ');
const a = Number(input[0]);
const b = Number(input[1]);
console.log(a);
console.log(b);
```

**SQL**

```sql
DECLARE @a INT, @b INT;
SET @a = 1;
SET @b = 2;
SELECT @a, @b;
```",,
